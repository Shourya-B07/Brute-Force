"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/auth.ts":
/*!*********************!*\
  !*** ./lib/auth.ts ***!
  \*********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authenticateUser: function() { return /* binding */ authenticateUser; },\n/* harmony export */   createUser: function() { return /* binding */ createUser; },\n/* harmony export */   generateToken: function() { return /* binding */ generateToken; },\n/* harmony export */   verifyToken: function() { return /* binding */ verifyToken; }\n/* harmony export */ });\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsonwebtoken */ \"(app-pages-browser)/./node_modules/jsonwebtoken/index.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./lib/supabase.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\nfunction generateToken(user) {\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().sign(user, JWT_SECRET, {\n        expiresIn: \"7d\"\n    });\n}\nfunction verifyToken(token) {\n    try {\n        return jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().verify(token, JWT_SECRET);\n    } catch (error) {\n        console.error(\"Token verification error:\", error);\n        return null;\n    }\n}\nasync function authenticateUser(email, password) {\n    try {\n        // Check if Supabase is properly configured\n        const supabaseUrl = \"https://guitbnhzjablpqtaznuy.supabase.co\";\n        const supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd1aXRibmh6amFibHBxdGF6bnV5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg5MDc2NzYsImV4cCI6MjA3NDQ4MzY3Nn0.lnd2PvFAga09A72QfzH5o3SS0VF4j6AVznw11Nupp7c\";\n        if (!supabaseUrl || supabaseUrl === \"your_supabase_url_here\" || !supabaseKey || supabaseKey === \"your_supabase_anon_key_here\") {\n            console.error(\"❌ Supabase not configured. Using fallback authentication for development.\");\n            // Check if user exists in mock users\n            if (true) {\n                const mockUsers = JSON.parse(localStorage.getItem(\"mockUsers\") || \"[]\");\n                const user = mockUsers.find((u)=>u.email === email && u.password === password);\n                if (user) {\n                    console.log(\"✅ Mock user authenticated for development:\", user);\n                    return {\n                        id: user.id,\n                        email: user.email,\n                        name: user.name,\n                        role: user.role\n                    };\n                } else {\n                    console.error(\"❌ Mock user not found or invalid credentials\");\n                    return null;\n                }\n            }\n            // If no window object (server-side), return null\n            console.error(\"❌ Cannot access localStorage on server-side\");\n            return null;\n        }\n        console.log(\"\\uD83D\\uDD10 Attempting authentication for:\", email);\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.auth.signInWithPassword({\n            email,\n            password\n        });\n        if (error) {\n            console.error(\"❌ Supabase auth error:\", error);\n            console.error(\"❌ Error details:\", {\n                message: error.message,\n                status: error.status\n            });\n            // Handle specific authentication errors\n            if (error.message.includes(\"Invalid login credentials\") || error.message.includes(\"invalid credentials\")) {\n                throw new Error(\"Invalid email or password. Please check your credentials and try again.\");\n            } else if (error.message.includes(\"Email not confirmed\")) {\n                throw new Error(\"Please check your email and click the confirmation link before signing in.\");\n            } else if (error.message.includes(\"rate limit\") || error.message.includes(\"too many\")) {\n                throw new Error(\"Too many login attempts. Please wait a moment and try again.\");\n            } else if (error.message.includes(\"network\") || error.message.includes(\"connection\")) {\n                throw new Error(\"Network error. Please check your connection and try again.\");\n            } else if (error.status === 400) {\n                // Handle 400 Bad Request specifically\n                if (error.message.includes(\"email\") || error.message.includes(\"Email\")) {\n                    throw new Error(\"Invalid email format. Please check your email address.\");\n                } else if (error.message.includes(\"password\") || error.message.includes(\"Password\")) {\n                    throw new Error(\"Invalid password. Please check your password.\");\n                } else {\n                    throw new Error(\"Authentication failed. Please check your credentials and try again.\");\n                }\n            } else {\n                throw new Error(\"Authentication failed: \".concat(error.message));\n            }\n        }\n        if (!data.user) {\n            console.error(\"❌ No user data returned from Supabase\");\n            // Try to find user in our custom users table as fallback\n            console.log(\"\\uD83D\\uDD27 Attempting to find user in custom users table...\");\n            const { data: customUser, error: customUserError } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"users\").select(\"*\").eq(\"email\", email).single();\n            if (customUserError || !customUser) {\n                console.error(\"❌ User not found in custom users table either\");\n                return null;\n            }\n            console.log(\"✅ Found user in custom users table:\", customUser);\n            return {\n                id: customUser.id,\n                email: customUser.email,\n                role: customUser.role,\n                name: customUser.name\n            };\n        }\n        console.log(\"✅ Supabase authentication successful for user:\", data.user.id);\n        console.log(\"✅ User details:\", {\n            id: data.user.id,\n            email: data.user.email,\n            created_at: data.user.created_at,\n            email_confirmed_at: data.user.email_confirmed_at\n        });\n        // Get user role from our custom user table\n        const { data: userData, error: userError } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"users\").select(\"*\").eq(\"id\", data.user.id).single();\n        if (userError) {\n            console.error(\"❌ Database query error:\", userError.message);\n            return null;\n        }\n        if (!userData) {\n            var _data_user_user_metadata, _data_user_email;\n            console.error(\"❌ User not found in custom users table\");\n            console.log(\"\\uD83D\\uDD27 Attempting to create user record...\");\n            // Try to create the user record in our custom users table\n            const { data: newUserData, error: createError } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"users\").insert({\n                id: data.user.id,\n                email: data.user.email || \"\",\n                name: ((_data_user_user_metadata = data.user.user_metadata) === null || _data_user_user_metadata === void 0 ? void 0 : _data_user_user_metadata.name) || ((_data_user_email = data.user.email) === null || _data_user_email === void 0 ? void 0 : _data_user_email.split(\"@\")[0]) || \"User\",\n                role: \"student\" // Default role\n            }).select().single();\n            if (createError || !newUserData) {\n                console.error(\"❌ Failed to create user record:\", createError === null || createError === void 0 ? void 0 : createError.message);\n                return null;\n            }\n            console.log(\"✅ User record created successfully\");\n            // Since this is a fallback case with default 'student' role, create student record\n            const { error: studentError } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"students\").insert({\n                user_id: newUserData.id,\n                name: newUserData.name,\n                email: newUserData.email,\n                class_name: \"Unassigned\",\n                subjects: []\n            });\n            if (studentError) {\n                console.error(\"❌ Failed to create student record:\", studentError.message);\n            } else {\n                console.log(\"✅ Student record created successfully\");\n            }\n            return {\n                id: newUserData.id,\n                email: newUserData.email,\n                role: newUserData.role,\n                name: newUserData.name\n            };\n        }\n        console.log(\"✅ User data retrieved:\", {\n            id: userData.id,\n            email: userData.email,\n            role: userData.role,\n            name: userData.name\n        });\n        // Ensure role-specific records exist\n        if (userData.role === \"teacher\") {\n            const { data: teacherData, error: teacherError } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"teachers\").select(\"*\").eq(\"user_id\", userData.id).single();\n            if (teacherError && teacherError.code === \"PGRST116\") {\n                // Teacher record doesn't exist, create it\n                console.log(\"\\uD83D\\uDD27 Creating missing teacher record...\");\n                const { error: createTeacherError } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"teachers\").insert({\n                    user_id: userData.id,\n                    name: userData.name,\n                    email: userData.email,\n                    subjects: [],\n                    max_hours_per_day: 8,\n                    max_hours_per_week: 40,\n                    availability: []\n                });\n                if (createTeacherError) {\n                    console.error(\"❌ Failed to create teacher record:\", createTeacherError.message);\n                } else {\n                    console.log(\"✅ Teacher record created successfully\");\n                }\n            }\n        } else if (userData.role === \"student\") {\n            const { data: studentData, error: studentError } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"students\").select(\"*\").eq(\"user_id\", userData.id).single();\n            if (studentError && studentError.code === \"PGRST116\") {\n                // Student record doesn't exist, create it\n                console.log(\"\\uD83D\\uDD27 Creating missing student record...\");\n                const { error: createStudentError } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"students\").insert({\n                    user_id: userData.id,\n                    name: userData.name,\n                    email: userData.email,\n                    class_name: \"Unassigned\",\n                    subjects: []\n                });\n                if (createStudentError) {\n                    console.error(\"❌ Failed to create student record:\", createStudentError.message);\n                } else {\n                    console.log(\"✅ Student record created successfully\");\n                }\n            }\n        }\n        return {\n            id: userData.id,\n            email: userData.email,\n            role: userData.role,\n            name: userData.name\n        };\n    } catch (error) {\n        console.error(\"❌ Authentication error:\", error);\n        return null;\n    }\n}\nasync function createUser(email, password, name, role) {\n    try {\n        // Check if Supabase is properly configured\n        const supabaseUrl = \"https://guitbnhzjablpqtaznuy.supabase.co\";\n        const supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd1aXRibmh6amFibHBxdGF6bnV5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg5MDc2NzYsImV4cCI6MjA3NDQ4MzY3Nn0.lnd2PvFAga09A72QfzH5o3SS0VF4j6AVznw11Nupp7c\";\n        if (!supabaseUrl || supabaseUrl === \"your_supabase_url_here\" || !supabaseKey || supabaseKey === \"your_supabase_anon_key_here\") {\n            console.error(\"❌ Supabase not configured. Using fallback authentication for development.\");\n            // Fallback for development - create a mock user\n            const mockUser = {\n                id: \"mock-\".concat(Date.now()),\n                email,\n                name,\n                role\n            };\n            // Store mock user data in localStorage for development\n            if (true) {\n                const existingUsers = JSON.parse(localStorage.getItem(\"mockUsers\") || \"[]\");\n                existingUsers.push({\n                    ...mockUser,\n                    password: password,\n                    createdAt: new Date().toISOString()\n                });\n                localStorage.setItem(\"mockUsers\", JSON.stringify(existingUsers));\n            }\n            console.log(\"✅ Mock user created for development:\", mockUser);\n            return mockUser;\n        }\n        console.log(\"\\uD83D\\uDD10 Attempting to create user:\", email, \"with role:\", role);\n        // Try signup with proper configuration\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.auth.signUp({\n            email,\n            password,\n            options: {\n                data: {\n                    name: name,\n                    role: role\n                }\n            }\n        });\n        console.log(\"\\uD83D\\uDD10 Supabase signup response:\", {\n            data,\n            error\n        });\n        if (error) {\n            console.error(\"❌ Supabase auth signup error:\", error);\n            console.error(\"❌ Error details:\", {\n                message: error.message,\n                status: error.status\n            });\n            // Handle specific error cases with user-friendly messages\n            if (error.message.includes(\"already registered\") || error.message.includes(\"already been registered\")) {\n                throw new Error(\"An account with this email already exists. Please try signing in instead.\");\n            } else if (error.message.includes(\"Invalid email\") || error.message.includes(\"invalid email\")) {\n                throw new Error(\"Please enter a valid email address.\");\n            } else if (error.message.includes(\"Password\") || error.message.includes(\"password\")) {\n                throw new Error(\"Password must be at least 6 characters long and contain letters and numbers.\");\n            } else if (error.message.includes(\"confirm\") || error.message.includes(\"email confirmation\")) {\n                throw new Error(\"Email confirmation is required. Please check your email and click the confirmation link.\");\n            } else if (error.status === 400) {\n                throw new Error(\"Invalid signup request. Please check your email format and password strength.\");\n            } else if (error.message.includes(\"rate limit\") || error.message.includes(\"too many\")) {\n                throw new Error(\"Too many signup attempts. Please wait a moment and try again.\");\n            } else if (error.message.includes(\"network\") || error.message.includes(\"connection\")) {\n                throw new Error(\"Network error. Please check your connection and try again.\");\n            } else {\n                throw new Error(\"Signup failed: \".concat(error.message));\n            }\n        }\n        if (!data.user) {\n            console.error(\"❌ No user data returned from Supabase\");\n            throw new Error(\"Signup failed: No user data returned\");\n        }\n        // Check if email confirmation is required\n        if (data.user && !data.session) {\n            console.log(\"\\uD83D\\uDCE7 Email confirmation required, but proceeding with signup...\");\n        // Continue with signup even if email confirmation is required\n        // The user will be created in our database\n        }\n        // Create database records regardless of email confirmation status\n        // This allows users to sign up immediately without email confirmation\n        // Create user record in our custom users table\n        const { data: userData, error: userError } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"users\").insert({\n            id: data.user.id,\n            email,\n            name,\n            role\n        }).select().single();\n        if (userError) {\n            console.error(\"❌ Database user creation error:\", userError.message);\n            throw new Error(\"Database error: \".concat(userError.message));\n        }\n        if (!userData) {\n            console.error(\"❌ No user data returned from database\");\n            throw new Error(\"Database error: No user data returned\");\n        }\n        // Create role-specific records\n        if (role === \"teacher\") {\n            console.log(\"\\uD83D\\uDD27 Creating teacher record for user:\", data.user.id);\n            const teacherData = {\n                user_id: data.user.id,\n                name,\n                email,\n                subjects: [],\n                max_hours_per_day: 8,\n                max_hours_per_week: 40,\n                availability: []\n            };\n            console.log(\"\\uD83D\\uDD27 Teacher data to insert:\", teacherData);\n            // Check if teacher record already exists\n            const { data: existingTeacher, error: checkError } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"teachers\").select(\"id\").eq(\"user_id\", data.user.id).single();\n            if (existingTeacher) {\n                console.log(\"✅ Teacher record already exists for user:\", data.user.id);\n            } else {\n                const { data: teacherResult, error: teacherError } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"teachers\").insert(teacherData).select();\n                if (teacherError) {\n                    console.error(\"❌ Teacher record creation error:\", teacherError);\n                    console.error(\"❌ Error details:\", {\n                        message: teacherError.message,\n                        details: teacherError.details,\n                        hint: teacherError.hint,\n                        code: teacherError.code\n                    });\n                    // Don't fail the entire signup, but log the error for debugging\n                    console.warn(\"⚠️ Teacher record creation failed, but user account was created\");\n                } else {\n                    console.log(\"✅ Teacher record created successfully:\", teacherResult);\n                }\n            }\n        } else if (role === \"student\") {\n            console.log(\"\\uD83D\\uDD27 Creating student record for user:\", data.user.id);\n            // Check if student record already exists\n            const { data: existingStudent, error: checkError } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"students\").select(\"id\").eq(\"user_id\", data.user.id).single();\n            if (existingStudent) {\n                console.log(\"✅ Student record already exists for user:\", data.user.id);\n            } else {\n                const { data: studentResult, error: studentError } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"students\").insert({\n                    user_id: data.user.id,\n                    name,\n                    email,\n                    class_name: \"Unassigned\",\n                    subjects: []\n                }).select();\n                if (studentError) {\n                    console.error(\"❌ Student record creation error:\", studentError);\n                    console.error(\"❌ Error details:\", {\n                        message: studentError.message,\n                        details: studentError.details,\n                        hint: studentError.hint,\n                        code: studentError.code\n                    });\n                    // Don't fail the entire signup, but log the error for debugging\n                    console.warn(\"⚠️ Student record creation failed, but user account was created\");\n                } else {\n                    console.log(\"✅ Student record created successfully:\", studentResult);\n                }\n            }\n        }\n        return {\n            id: userData.id,\n            email: userData.email,\n            role: userData.role,\n            name: userData.name\n        };\n    } catch (error) {\n        console.error(\"User creation error:\", error);\n        return null;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/auth.ts\n"));

/***/ })

});