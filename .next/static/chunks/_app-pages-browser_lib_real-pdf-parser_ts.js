"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_lib_real-pdf-parser_ts"],{

/***/ "(app-pages-browser)/./lib/real-pdf-parser.ts":
/*!********************************!*\
  !*** ./lib/real-pdf-parser.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractCoursesFromText: function() { return /* binding */ extractCoursesFromText; },\n/* harmony export */   extractTextFromPDF: function() { return /* binding */ extractTextFromPDF; }\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n// Real PDF parsing implementation\n// This would use actual PDF parsing libraries to extract text from uploaded PDFs\n// Real PDF text extraction using pdf-parse library\nasync function extractTextFromPDF(file) {\n    try {\n        console.log(\"\\uD83D\\uDCC4 Extracting text from PDF: \".concat(file.name));\n        // REAL PDF PARSING - Extract actual content from uploaded PDF\n        console.log(\"\\uD83D\\uDCC4 Parsing actual PDF content from: \".concat(file.name));\n        console.log(\"\\uD83D\\uDCC4 File size: \".concat(file.size, \" bytes\"));\n        // Use a more reliable PDF parsing approach\n        try {\n            const arrayBuffer = await file.arrayBuffer();\n            console.log(\"\\uD83D\\uDCC4 PDF file size: \".concat(arrayBuffer.byteLength, \" bytes\"));\n            // Try multiple PDF parsing approaches\n            let extractedText = \"\";\n            let pageCount = 1;\n            // Approach 1: Try pdfjs-dist with optimized settings\n            try {\n                const pdfjsLib = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pdfjs-dist_build_pdf_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! pdfjs-dist */ \"(app-pages-browser)/./node_modules/pdfjs-dist/build/pdf.mjs\"));\n                // Use a more reliable worker source\n                pdfjsLib.GlobalWorkerOptions.workerSrc = \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\n                const pdf = await pdfjsLib.getDocument({\n                    data: arrayBuffer,\n                    useWorkerFetch: false,\n                    isEvalSupported: false,\n                    useSystemFonts: true,\n                    disableFontFace: true,\n                    disableRange: true,\n                    disableStream: true\n                }).promise;\n                console.log(\"\\uD83D\\uDCC4 PDF loaded: \".concat(pdf.numPages, \" pages\"));\n                pageCount = pdf.numPages;\n                // Extract text from all pages with enhanced table format support\n                for(let pageNum = 1; pageNum <= pdf.numPages; pageNum++){\n                    try {\n                        const page = await pdf.getPage(pageNum);\n                        const textContent = await page.getTextContent();\n                        // Enhanced text extraction for table formats\n                        const pageText = textContent.items.map((item)=>{\n                            // Preserve line breaks and spacing for table formats\n                            if (item.hasEOL) {\n                                return item.str + \"\\n\";\n                            }\n                            return item.str + \" \";\n                        }).join(\"\").replace(/\\s+/g, \" \") // Normalize whitespace\n                        .replace(/\\n\\s+/g, \"\\n\") // Clean up line breaks\n                        ;\n                        extractedText += pageText + \"\\n\";\n                    } catch (pageError) {\n                        console.warn(\"⚠️ Could not extract text from page \".concat(pageNum, \":\"), pageError);\n                    }\n                }\n                console.log(\"✅ Successfully extracted text from \".concat(pdf.numPages, \" pages\"));\n            } catch (pdfjsError) {\n                console.warn(\"⚠️ pdfjs-dist failed, trying alternative approach:\", pdfjsError);\n                // Approach 2: Try using a different PDF parsing library\n                try {\n                    // Use pdf-parse as a fallback (if available)\n                    const pdfParse = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pdf-parse_index_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! pdf-parse */ \"(app-pages-browser)/./node_modules/pdf-parse/index.js\", 23));\n                    const buffer = Buffer.from(arrayBuffer);\n                    const data = await pdfParse.default(buffer);\n                    extractedText = data.text;\n                    pageCount = data.numpages;\n                    console.log(\"✅ Successfully extracted text using pdf-parse\");\n                } catch (pdfParseError) {\n                    console.warn(\"⚠️ pdf-parse failed, trying basic text extraction:\", pdfParseError);\n                    // Approach 3: Basic text extraction as last resort\n                    const text = await new Promise((resolve, reject)=>{\n                        const reader = new FileReader();\n                        reader.onload = (e)=>{\n                            var _e_target;\n                            const result = (_e_target = e.target) === null || _e_target === void 0 ? void 0 : _e_target.result;\n                            resolve(result || \"\");\n                        };\n                        reader.onerror = ()=>reject(new Error(\"Failed to read PDF file\"));\n                        reader.readAsText(file);\n                    });\n                    extractedText = text;\n                    console.log(\"✅ Using basic text extraction\");\n                }\n            }\n            console.log(\"\\uD83D\\uDCC4 Extracted text length: \".concat(extractedText.length, \" characters\"));\n            console.log(\"\\uD83D\\uDCC4 Text preview: \".concat(extractedText.substring(0, 200), \"...\"));\n            // If no text was extracted, throw an error instead of using hardcoded data\n            if (extractedText.length === 0) {\n                throw new Error(\"No text could be extracted from the PDF. Please try a different PDF file.\");\n            }\n            // If extracted text looks corrupted, throw an error\n            if (extractedText.includes(\"endstream\") || extractedText.includes(\"endobj\") || extractedText.includes(\"xref\")) {\n                throw new Error(\"PDF appears to be corrupted or encrypted. Please try a different PDF file.\");\n            }\n            return {\n                text: extractedText,\n                pages: pageCount,\n                metadata: {\n                    title: file.name.replace(\".pdf\", \"\"),\n                    author: \"Unknown\",\n                    creationDate: new Date().toISOString()\n                }\n            };\n        } catch (error) {\n            console.error(\"❌ All PDF parsing methods failed:\", error);\n            throw new Error(\"Failed to parse PDF: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    } catch (error) {\n        console.error(\"❌ Error extracting text from PDF:\", error);\n        throw error;\n    }\n}\n// Enhanced course extraction with multiple patterns\nfunction extractCoursesFromText(text) {\n    const courses = [];\n    console.log(\"\\uD83D\\uDD0D Extracting courses from PDF text...\");\n    console.log(\"\\uD83D\\uDCC4 Text length: \".concat(text.length, \" characters\"));\n    console.log(\"\\uD83D\\uDCC4 Text preview: \".concat(text.substring(0, 500), \"...\"));\n    // Comprehensive patterns to extract Course Title and Credits from ANY table format PDF\n    const patterns = [\n        // Pattern 1: \"Course Title: [Title]\" followed by \"Credits: [Number]\"\n        /Course Title:\\s*([^\\n\\r]+)\\s*[\\n\\r]+Credits:\\s*(\\d+)/gi,\n        // Pattern 2: \"Course Title: [Title]\" and \"Credits: [Number]\" on separate lines\n        /Course Title:\\s*([^\\n\\r]+).*?Credits:\\s*(\\d+)/gi,\n        // Pattern 3: Table format with title and credits\n        /([A-Za-z\\s&\\-\\+\\(\\)\\/]+?)\\s+(\\d+)\\s*credits?/gi,\n        // Pattern 4: Numbered courses \"1. [Title] ([Code]) - [Credits] credits\"\n        /(\\d+)\\.\\s*([^(]+?)\\s*\\(([^)]+)\\)\\s*[-\\s]*(\\d+)\\s*credits?/gi,\n        // Pattern 5: Generic course format \"[Title] - [Credits] Credits\"\n        /([A-Za-z\\s&\\-\\+\\(\\)\\/]+?)\\s*-\\s*(\\d+)\\s*Credits?/gi,\n        // Pattern 6: Course name followed by credits in parentheses\n        /([A-Za-z\\s&\\-\\+\\(\\)\\/]+?)\\s*\\((\\d+)\\s*credits?\\)/gi,\n        // Pattern 7: Simple format \"Subject Name Credits: X\"\n        /([A-Za-z\\s&\\-\\+\\(\\)\\/]+?)\\s+Credits:\\s*(\\d+)/gi,\n        // Pattern 8: Course name with credits at end of line\n        /([A-Za-z\\s&\\-\\+\\(\\)\\/]+?)\\s+(\\d+)\\s*$/gm,\n        // Pattern 9: Course name followed by credits (space separated)\n        /([A-Za-z\\s&\\-\\+\\(\\)\\/]+?)\\s+(\\d+)\\s*credits?/gi,\n        // Pattern 10: Course name with credits after colon\n        /([A-Za-z\\s&\\-\\+\\(\\)\\/]+?):\\s*(\\d+)/gi,\n        // Pattern 11: Table format - Course title followed by credits (for VI Semester format)\n        /([A-Za-z\\s&\\-\\+\\(\\)\\/]+?)\\s+(\\d+)\\s*$/gm,\n        // Pattern 12: Course title with credits in table format\n        /([A-Za-z\\s&\\-\\+\\(\\)\\/]+?)\\s+(\\d+)\\s*$/gm,\n        // Pattern 13: Generic course pattern (removed hardcoded course names)\n        /([A-Za-z][A-Za-z\\s&\\-\\+\\(\\)\\/]{4,})\\s+(\\d+)/gi,\n        // Pattern 14: Course titles with credits (space separated)\n        /([A-Za-z][A-Za-z\\s&\\-\\+\\(\\)\\/]{2,})\\s+(\\d+)\\s*$/gm,\n        // Pattern 15: Very broad pattern for any text followed by number\n        /([A-Za-z][A-Za-z\\s&\\-\\+\\(\\)\\/]{1,})\\s+(\\d+)/gi,\n        // Pattern 16: Table row format - Course name with credits (enhanced for table formats)\n        /([A-Za-z][A-Za-z\\s&\\-\\+\\(\\)\\/]{3,})\\s+(\\d+)\\s*$/gm,\n        // Pattern 17: Course name with credits (tab or space separated)\n        /([A-Za-z][A-Za-z\\s&\\-\\+\\(\\)\\/]{3,})\\s+(\\d+)\\s*$/gm,\n        // Pattern 18: Course name with credits (multiple spaces)\n        /([A-Za-z][A-Za-z\\s&\\-\\+\\(\\)\\/]{3,})\\s+(\\d+)\\s*$/gm,\n        // Pattern 19: Course name with credits (end of line)\n        /([A-Za-z][A-Za-z\\s&\\-\\+\\(\\)\\/]{3,})\\s+(\\d+)\\s*$/gm,\n        // Pattern 20: Course name with credits (any format)\n        /([A-Za-z][A-Za-z\\s&\\-\\+\\(\\)\\/]{3,})\\s+(\\d+)/gi\n    ];\n    patterns.forEach((pattern, patternIndex)=>{\n        console.log(\"\\uD83D\\uDD0D Trying pattern \".concat(patternIndex + 1, \": \").concat(pattern));\n        const matches = Array.from(text.matchAll(pattern));\n        console.log(\"\\uD83D\\uDCDA Found \".concat(matches.length, \" matches with pattern \").concat(patternIndex + 1));\n        matches.forEach((match, index)=>{\n            let courseTitle;\n            let credits;\n            // Handle different match patterns\n            if (patternIndex === 3) {\n                // Pattern 4: Numbered courses with course code \"1. [Title] ([Code]) - [Credits] credits\"\n                courseTitle = match[2].trim();\n                credits = parseInt(match[4]);\n            } else {\n                // All other patterns\n                courseTitle = match[1].trim();\n                credits = parseInt(match[2]);\n            }\n            // Clean up course title (remove extra whitespace, special characters)\n            courseTitle = courseTitle.replace(/\\s+/g, \" \").trim();\n            // Focused filtering for course titles and credits only\n            const skipPatterns = [\n                /^total/i,\n                /^tota/i,\n                /^credits?$/i,\n                /^course/i,\n                /^title/i,\n                /^semester/i,\n                /^syllabus/i,\n                /^page/i,\n                /^chapter/i,\n                /^section/i,\n                /^table/i,\n                /^figure/i,\n                /^appendix/i,\n                /^reference/i,\n                /^bibliography/i,\n                /^index/i,\n                /^contents/i,\n                /^abstract/i,\n                /^introduction/i,\n                /^conclusion/i,\n                /^\\d+$/,\n                /^[a-z]$/i,\n                /^[^a-zA-Z]*$/,\n                /^[^a-zA-Z]*[a-zA-Z]{1,2}[^a-zA-Z]*$/,\n                /^[A-Z]{1,3}$/,\n                /^\\d+[a-zA-Z]?$/,\n                /^[^a-zA-Z]*$/,\n                /^.{1,2}$/,\n                /^[^a-zA-Z]*[a-zA-Z]{1,2}[^a-zA-Z]*$/,\n                /^vi\\s+semester/i,\n                /^sl\\.?\\s*no/i,\n                /^teaching\\s+hours/i,\n                /^examination/i,\n                /^total\\s+teaching/i,\n                /^total\\s+examination/i,\n                /^total\\s+credits/i,\n                /endstream/i,\n                /endobj/i,\n                /xref/i,\n                /^R\\s*\\/Info/i,\n                /^stream/i,\n                /^obj/i,\n                /^startxref/i,\n                /^trailer/i // Skip PDF corruption text\n            ];\n            const shouldSkip = skipPatterns.some((pattern)=>pattern.test(courseTitle));\n            // Enhanced validation for course titles and credits (works with any table format)\n            const isValidCourse = courseTitle && courseTitle.length >= 3 && // Minimum 3 characters\n            !isNaN(credits) && credits >= 0 && credits <= 20 && // Allow up to 20 credits\n            !shouldSkip && // Course title must be a valid course name\n            /[a-zA-Z]/.test(courseTitle) && // Must contain letters\n            courseTitle.split(\" \").length >= 1 && // Must have at least 1 word (flexible for short courses)\n            !courseTitle.match(/^\\d+/) && // Must not start with number\n            !courseTitle.match(/^[^a-zA-Z]/) && // Must start with letter\n            !courseTitle.includes(\"VI SEMESTER\") && // Skip if contains header\n            !courseTitle.match(/^[A-Z]{1,3}\\s+[A-Z]{1,3}$/) && // Skip short acronyms\n            !courseTitle.includes(\"endstream\") && // Skip PDF corruption\n            !courseTitle.includes(\"endobj\") && // Skip PDF corruption\n            !courseTitle.includes(\"xref\") && // Skip PDF corruption\n            !courseTitle.includes(\"R /Info\") && // Skip PDF corruption\n            !courseTitle.includes(\"stream\") && // Skip PDF corruption\n            !courseTitle.includes(\"obj\") && // Skip PDF corruption\n            !courseTitle.includes(\"startxref\") && // Skip PDF corruption\n            !courseTitle.includes(\"trailer\") && // Skip PDF corruption\n            // Additional validation for table formats\n            courseTitle.length >= 3 && // Must be at least 3 characters\n            !courseTitle.match(/^\\d+/) && // Must not start with number\n            !courseTitle.match(/^[^a-zA-Z]/) && // Must start with letter\n            // Must contain at least one letter (flexible for various course names)\n            /[a-zA-Z]/.test(courseTitle);\n            if (isValidCourse) {\n                console.log(\"\\uD83D\\uDCD6 Extracted course \".concat(index + 1, \": \").concat(courseTitle, \" (\").concat(credits, \" credits)\"));\n                courses.push({\n                    number: (courses.length + 1).toString(),\n                    name: courseTitle,\n                    code: \"COURSE\".concat(courses.length + 1),\n                    credits: credits,\n                    hours: undefined // We only need title and credits\n                });\n            } else if (courseTitle && courseTitle.length > 3) {\n                console.log('⚠️ Skipped invalid course: \"'.concat(courseTitle, '\" (').concat(credits, \" credits)\"));\n            }\n        });\n    });\n    // Remove duplicates based on course name (case-insensitive and similar names)\n    const uniqueCourses = courses.filter((course, index, self)=>index === self.findIndex((c)=>{\n            const name1 = c.name.toLowerCase().replace(/\\s+/g, \" \").trim();\n            const name2 = course.name.toLowerCase().replace(/\\s+/g, \" \").trim();\n            return name1 === name2 || name1.includes(\"credits\") && name2 === name1.replace(\" credits\", \"\") || name2.includes(\"credits\") && name1 === name2.replace(\" credits\", \"\") || name1 === name2.replace(\" credits\", \"\") || name2 === name1.replace(\" credits\", \"\");\n        }));\n    console.log(\"✅ Extracted \".concat(uniqueCourses.length, \" unique courses\"));\n    return uniqueCourses;\n}\n// Extract course section from text\nfunction extractCourseSection(text, courseName) {\n    const lines = text.split(\"\\n\");\n    let courseSection = \"\";\n    let foundCourse = false;\n    for (const line of lines){\n        if (line.includes(courseName)) {\n            foundCourse = true;\n            courseSection += line + \"\\n\";\n        } else if (foundCourse && (line.match(/^\\d+[\\.\\)\\-\\s]/) || line.includes(\"TOTAL:\") || line.includes(\"COURSE STRUCTURE\"))) {\n            break;\n        } else if (foundCourse) {\n            courseSection += line + \"\\n\";\n        }\n    }\n    return courseSection;\n}\n// Extract credits from course section\nfunction extractCreditsFromText(section) {\n    const patterns = [\n        /Credits?:\\s*(\\d+)/i,\n        /Credit:\\s*(\\d+)/i,\n        /(\\d+)\\s*credits?/i,\n        /(\\d+)\\s*credit/i\n    ];\n    for (const pattern of patterns){\n        const match = section.match(pattern);\n        if (match) {\n            return parseInt(match[1]);\n        }\n    }\n    return undefined;\n}\n// Extract hours from course section\nfunction extractHoursFromText(section) {\n    const theoryMatch = section.match(/Theory[:\\s]*(\\d+)/i);\n    const tutorialMatch = section.match(/Tutorial[:\\s]*(\\d+)/i);\n    const practicalMatch = section.match(/Practical[:\\s]*(\\d+)/i);\n    if (theoryMatch || tutorialMatch || practicalMatch) {\n        return {\n            theory: theoryMatch ? parseInt(theoryMatch[1]) : 0,\n            tutorial: tutorialMatch ? parseInt(tutorialMatch[1]) : 0,\n            practical: practicalMatch ? parseInt(practicalMatch[1]) : 0\n        };\n    }\n    return undefined;\n} // Functions are already exported above\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/real-pdf-parser.ts\n"));

/***/ })

}]);